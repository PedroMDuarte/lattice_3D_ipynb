===
001
===

This data was generated before I took proper care of the derivative of the density distribution.  In the automation of finding the proper compensation to get 350,000  sometimes the program would put too much compensation and the atoms start accumulating on the wings and one gets the desired 350,000 but off of some wing atoms.   This happens specially if the green beam waist is larger than the IR beam waist.   

So, in short, this data is wrong. 


===
002
===

In this data I corrected and checked wheter the density had a positive derivative for larger radii (Larger than 25% of the IR beam waist).  This allows me to discard points in the beam waist parameter space.   What the program does is it still counts those points, but we have to keep in mind that the number there will necessarily be less than 3.5e5 at half filling.

This could even be an advantage because those atoms will be shed away by the sample.   

Data in 002 was run with the constraint of having a max number of atoms equal to 350,000.   This may have biased our results in that for larger wL/wC  one can get an optimal etaF but only with a large number of atoms.  

===
003
===

This data is the same as 002, but run with a max atom number constraint of  N=5,000,000


===
004
===

This data is the same as 002, but run with a max atom number constraint of  N=500,000


===
005
===

This data is the same as 004,  but in this case I sampled the two different beam waists differntly. 

The previous sampling was 

wIRs = np.arange( 44., 62., 5. )
wGRs = np.linspace( wIR-16., wIR+20., 16)

The sampling for 005 is 

wIRs = np.arange( 44., 62., 3. )
wGRs = np.linspace( wIR-16., wIR+12., 10)

===
006
===

This is a very fine sampling with N=600,000. 

wIRs = np.arange( 44., 70., 1.)
wGRs = np.linspace( wIR-12., wIR+8., 10)  

===
007
===

Complements the scan of 006 

wGRs = np.arange( 28., wIR-10., 2.)  

===
008
===

This is a concatenation of 006 and 007 

===
009
===

This one goes to beam waists up to 80 um. 

wIRs = np.arange( 71., 81., 1. )
wGRs = np.arange( 28., wIR+8., 2.) 

